{"version":3,"file":"react-native-media-controls.cjs.production.min.js","sources":["../src/constants/playerStates.ts","../src/MediaControls.style.ts","../src/utils.ts","../src/Controls.tsx","../src/Slider.tsx","../src/MediaControls.tsx","../src/Toolbar.tsx"],"sourcesContent":["enum PLAYER_STATES {\n  PLAYING = 0,\n  PAUSED = 1,\n  ENDED = 2,\n}\n\nexport { PLAYER_STATES };\n","import { StyleSheet } from \"react-native\";\n\nconst containerBackgroundColor = \"rgba(45, 59, 62, 0.4)\";\nconst playButtonBorderColor = \"rgba(255,255,255,0.5)\";\nconst white = \"#fff\";\n\nexport default StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    backgroundColor: containerBackgroundColor,\n    bottom: 0,\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    left: 0,\n    paddingHorizontal: 20,\n    paddingVertical: 13,\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n  controlsRow: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    flex: 1,\n    justifyContent: \"center\",\n  },\n  fullScreenContainer: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    justifyContent: \"center\",\n    paddingLeft: 20,\n  },\n  playButton: {\n    alignItems: \"center\",\n    borderColor: playButtonBorderColor,\n    borderRadius: 20,\n    borderWidth: 1.5,\n    height: 40,\n    justifyContent: \"center\",\n    width: 40,\n    marginTop: -25,\n    backgroundColor: \"transparent\",\n  },\n  playIcon: {\n    height: 22,\n    resizeMode: \"contain\",\n    width: 22,\n  },\n  progressColumnContainer: {\n    flex: 1,\n  },\n  progressContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    marginBottom: -25,\n  },\n  progressSlider: {\n    alignSelf: \"stretch\",\n  },\n  replayIcon: {\n    height: 20,\n    resizeMode: \"stretch\",\n    width: 25,\n    color: \"white\",\n  },\n  thumb: {\n    backgroundColor: white,\n    borderRadius: 15 / 2,\n    borderWidth: 3,\n    height: 15,\n    width: 15,\n  },\n  timeRow: {\n    alignSelf: \"stretch\",\n  },\n  timerLabel: {\n    color: white,\n    fontSize: 12,\n  },\n  timerLabelsContainer: {\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginBottom: -7,\n  },\n  toolbar: {\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"flex-end\",\n  },\n  toolbarRow: {\n    alignItems: \"flex-start\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n  },\n  track: {\n    borderRadius: 1,\n    height: 5,\n  },\n});\n","import { PLAYER_STATES } from \"./constants/playerStates\";\n\nexport const humanizeVideoDuration = (seconds: number) => {\n  const [begin, end] = seconds >= 3600 ? [11, 8] : [14, 5];\n  const date = new Date(0);\n\n  date.setSeconds(seconds);\n  return date.toISOString().substr(begin, end);\n};\n\nexport const noop = () => {};\n\nexport const getPlayerStateIcon = (playerState: PLAYER_STATES) => {\n  switch (playerState) {\n    case PLAYER_STATES.PAUSED:\n      return require(\"./assets/ic_play.png\");\n    case PLAYER_STATES.PLAYING:\n      return require(\"./assets/ic_pause.png\");\n    case PLAYER_STATES.ENDED:\n      return require(\"./assets/ic_replay.png\");\n    default:\n      return null;\n  }\n};\n","import React from \"react\";\nimport { TouchableOpacity, View, ActivityIndicator, Image } from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { getPlayerStateIcon } from \"./utils\";\nimport { Props } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\n\ntype ControlsProps = Pick<\n  Props,\n  \"isLoading\" | \"mainColor\" | \"playerState\" | \"onReplay\"\n> & {\n  onPause: () => void;\n};\n\nconst Controls = (props: ControlsProps) => {\n  const { isLoading, playerState, onReplay, onPause } = props;\n  const icon = getPlayerStateIcon(playerState);\n  const pressAction = playerState === PLAYER_STATES.ENDED ? onReplay : onPause;\n\n  const content = isLoading ? (\n    <ActivityIndicator size=\"large\" color=\"#FFF\" />\n  ) : (\n    <TouchableOpacity\n      style={[styles.playButton]}\n      onPress={pressAction}\n      accessibilityLabel={PLAYER_STATES.PAUSED ? \"Tap to Play\" : \"Tap to Pause\"}\n      accessibilityHint={\"Plays and Pauses the Video\"}\n    >\n      <Image source={icon} style={styles.playIcon} />\n    </TouchableOpacity>\n  );\n\n  return <View style={[styles.controlsRow]}>{content}</View>;\n};\n\nexport { Controls };\n","import React from \"react\";\nimport { TouchableOpacity, View, Text, Image, ViewStyle } from \"react-native\";\nimport RNSlider from \"react-native-slider\";\nimport styles from \"./MediaControls.style\";\nimport { humanizeVideoDuration } from \"./utils\";\nimport { Props as MediaControlsProps } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\n\nexport type CustomSliderStyle = {\n  containerStyle: ViewStyle;\n  trackStyle: ViewStyle;\n  thumbStyle: ViewStyle;\n};\n\ntype Props = Pick<\n  MediaControlsProps,\n  | \"progress\"\n  | \"duration\"\n  | \"mainColor\"\n  | \"onFullScreen\"\n  | \"playerState\"\n  | \"onSeek\"\n  | \"onSeeking\"\n> & {\n  onPause: () => void;\n  customSliderStyle?: CustomSliderStyle;\n};\n\nconst fullScreenImage = require(\"./assets/ic_fullscreen.png\");\n\nconst Slider = (props: Props) => {\n  const {\n    customSliderStyle,\n    duration,\n    mainColor,\n    onFullScreen,\n    onPause,\n    progress,\n  } = props;\n\n  const containerStyle = customSliderStyle?.containerStyle || {};\n  const customTrackStyle = customSliderStyle?.trackStyle || {};\n  const customThumbStyle = customSliderStyle?.thumbStyle || {};\n\n  const dragging = (value: number) => {\n    const { onSeeking, playerState } = props;\n    onSeeking(value);\n\n    if (playerState === PLAYER_STATES.PAUSED) {\n      return;\n    }\n\n    onPause();\n  };\n\n  const seekVideo = (value: number) => {\n    props.onSeek(value);\n    onPause();\n  };\n\n  return (\n    <View\n      style={[styles.controlsRow, styles.progressContainer, containerStyle]}\n    >\n      <View style={styles.progressColumnContainer}>\n        <View style={[styles.timerLabelsContainer]}>\n          <Text style={styles.timerLabel}>\n            {humanizeVideoDuration(progress)}\n          </Text>\n          <Text style={styles.timerLabel}>\n            {humanizeVideoDuration(duration)}\n          </Text>\n        </View>\n        <RNSlider\n          style={[styles.progressSlider]}\n          onValueChange={dragging}\n          onSlidingComplete={seekVideo}\n          maximumValue={Math.floor(duration)}\n          value={Math.floor(progress)}\n          trackStyle={[styles.track, customTrackStyle]}\n          thumbStyle={[\n            styles.thumb,\n            customThumbStyle,\n            { borderColor: mainColor },\n          ]}\n          minimumTrackTintColor={mainColor}\n          disabled={false}\n          iconComponent={null}\n        />\n      </View>\n      {Boolean(onFullScreen) && (\n        <TouchableOpacity\n          style={styles.fullScreenContainer}\n          onPress={onFullScreen}\n        >\n          <Image source={fullScreenImage} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nexport { Slider };\n","import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  GestureResponderEvent,\n  ViewStyle,\n} from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\nimport { Controls } from \"./Controls\";\nimport { Slider, CustomSliderStyle } from \"./Slider\";\nimport { Toolbar } from \"./Toolbar\";\n\nexport type Props = {\n  children: React.ReactNode;\n  containerStyle?: ViewStyle;\n  duration: number;\n  fadeOutDelay?: number;\n  isFullScreen: boolean;\n  isLoading: boolean;\n  mainColor: string;\n  onFullScreen?: (event: GestureResponderEvent) => void;\n  onPaused: (playerState: PLAYER_STATES) => void;\n  onReplay: () => void;\n  onSeek: (value: number) => void;\n  onSeeking: (value: number) => void;\n  playerState: PLAYER_STATES;\n  progress: number;\n  showOnStart?: boolean;\n  sliderStyle?: CustomSliderStyle;\n  toolbarStyle?: ViewStyle;\n};\n\nconst MediaControls = (props: Props) => {\n  const {\n    children,\n    containerStyle: customContainerStyle = {},\n    duration,\n    fadeOutDelay = 5000,\n    isLoading = false,\n    mainColor = \"rgba(12, 83, 175, 0.9)\",\n    onFullScreen,\n    onReplay: onReplayCallback,\n    onSeek,\n    onSeeking,\n    playerState,\n    progress,\n    showOnStart = true,\n    sliderStyle, // defaults are applied in Slider.tsx\n    toolbarStyle: customToolbarStyle = {},\n  } = props;\n  const { initialOpacity, initialIsVisible } = (() => {\n    if (showOnStart) {\n      return {\n        initialOpacity: 1,\n        initialIsVisible: true,\n      };\n    }\n\n    return {\n      initialOpacity: 0,\n      initialIsVisible: false,\n    };\n  })();\n\n  const [opacity] = useState(new Animated.Value(initialOpacity));\n  const [isVisible, setIsVisible] = useState(initialIsVisible);\n  const [isSliderVisible, setIsSliderVisible] = useState(initialIsVisible);\n\n  useEffect(() => {\n    fadeOutControls(fadeOutDelay);\n  }, []);\n\n  const fadeOutControls = (delay = 0) => {\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: 300,\n      delay,\n      useNativeDriver: false,\n    }).start(result => {\n      /* I noticed that the callback is called twice, when it is invoked and when it completely finished\n      This prevents some flickering */\n      if (result.finished) {\n        setIsVisible(false);\n      }\n    });\n  };\n\n  const sliderOnlyFadeOutControls = (delay = 0) => {\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: 300,\n      delay,\n      useNativeDriver: false,\n    }).start(result => {\n      /* I noticed that the callback is called twice, when it is invoked and when it completely finished\n      This prevents some flickering */\n      if (result.finished) {\n        setIsSliderVisible(false);\n      }\n    });\n  };\n\n  const fadeInControls = (loop = true) => {\n    setIsVisible(true);\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: 300,\n      delay: 0,\n      useNativeDriver: false,\n    }).start(() => {\n      if (loop) {\n        fadeOutControls(fadeOutDelay);\n      }\n    });\n  };\n\n  const onReplay = () => {\n    fadeOutControls(fadeOutDelay);\n    onReplayCallback();\n  };\n\n  const cancelAnimation = () => opacity.stopAnimation(() => setIsVisible(true));\n\n  const onPause = () => {\n    const { playerState, onPaused } = props;\n    const { PLAYING, PAUSED, ENDED } = PLAYER_STATES;\n    switch (playerState) {\n      case PLAYING: {\n        cancelAnimation();\n        break;\n      }\n      case PAUSED: {\n        // fadeOutControls(fadeOutDelay);\n        sliderOnlyFadeOutControls(fadeOutDelay);\n        break;\n      }\n      case ENDED:\n        break;\n    }\n\n    const newPlayerState = playerState === PLAYING ? PAUSED : PLAYING;\n    return onPaused(newPlayerState);\n  };\n\n  const toggleControls = () => {\n    // value is the last value of the animation when stop animation was called.\n    // As this is an opacity effect, I (Charlie) used the value (0 or 1) as a boolean\n    opacity.stopAnimation((value: number) => {\n      setIsVisible(!!value);\n      return value ? fadeOutControls() : fadeInControls();\n    });\n  };\n\n  return (\n    <TouchableWithoutFeedback accessible={false} onPress={toggleControls}>\n      <Animated.View\n        style={[styles.container, customContainerStyle, { opacity }]}\n      >\n        {isVisible && (\n          <View style={[styles.container, customContainerStyle]}>\n            <View\n              style={[\n                styles.controlsRow,\n                styles.toolbarRow,\n                customToolbarStyle,\n              ]}\n            >\n              {children}\n            </View>\n            <Controls\n              onPause={onPause}\n              onReplay={onReplay}\n              isLoading={isLoading}\n              mainColor={mainColor}\n              playerState={playerState}\n            />\n            {isSliderVisible ? (\n              <Slider\n                progress={progress}\n                duration={duration}\n                mainColor={mainColor}\n                onFullScreen={onFullScreen}\n                playerState={playerState}\n                onSeek={onSeek}\n                onSeeking={onSeeking}\n                onPause={onPause}\n                customSliderStyle={sliderStyle}\n              />\n            ) : null}\n          </View>\n        )}\n      </Animated.View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nMediaControls.Toolbar = Toolbar;\n\nexport default MediaControls;\n","import React from \"react\";\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst Toolbar = ({ children }: Props) => <>{children}</>;\n\nexport { Toolbar };\n"],"names":["PLAYER_STATES","StyleSheet","create","container","alignItems","backgroundColor","bottom","flex","flexDirection","justifyContent","left","paddingHorizontal","paddingVertical","position","right","top","controlsRow","alignSelf","fullScreenContainer","paddingLeft","playButton","borderColor","borderRadius","borderWidth","height","width","marginTop","playIcon","resizeMode","progressColumnContainer","progressContainer","marginBottom","progressSlider","replayIcon","color","thumb","timeRow","timerLabel","fontSize","timerLabelsContainer","toolbar","toolbarRow","track","humanizeVideoDuration","seconds","begin","end","date","Date","setSeconds","toISOString","substr","Controls","props","isLoading","playerState","onReplay","onPause","icon","PAUSED","require","PLAYING","ENDED","getPlayerStateIcon","pressAction","content","React","ActivityIndicator","size","TouchableOpacity","style","styles","onPress","accessibilityLabel","accessibilityHint","Image","source","View","fullScreenImage","Slider","customSliderStyle","duration","mainColor","onFullScreen","progress","customTrackStyle","trackStyle","customThumbStyle","thumbStyle","containerStyle","Text","RNSlider","onValueChange","value","onSeeking","onSlidingComplete","onSeek","maximumValue","Math","floor","minimumTrackTintColor","disabled","iconComponent","Boolean","MediaControls","children","customContainerStyle","fadeOutDelay","onReplayCallback","showOnStart","sliderStyle","toolbarStyle","customToolbarStyle","initialOpacity","initialIsVisible","opacity","useState","Animated","Value","isVisible","setIsVisible","isSliderVisible","setIsSliderVisible","useEffect","fadeOutControls","delay","timing","toValue","useNativeDriver","start","result","finished","onPaused","stopAnimation","TouchableWithoutFeedback","accessible","loop","Toolbar"],"mappings":"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"}